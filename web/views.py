from django.shortcuts import render
from django.http import HttpResponse
# -------------------------- db  ----------------------------
from .models import lecture1 , lecture2 , problem , scenario, user # 모델 임포트
# -----------------------------------------------------------
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseRedirect
from django.db.models import Sum
from django.http import HttpResponseNotFound #추가
from django.db import IntegrityError
from django.contrib import messages
from django.core.paginator import Paginator
from django.shortcuts import render, get_object_or_404



import datetime
import hashlib


#홈페이지 
def home(request):
    if 'web_id' in request.session:
        return render(request, 'bob/home.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/home.html')
    
#로그인 페이지
def login_page(request):
    if 'web_id' in request.session:
        return render(request, 'bob/login.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/login.html')
    
#로그인 후 로직
def login_logic(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']

        try:
            WebUser = user.objects.get(web_id=username)
        except user.DoesNotExist:
            WebUser = None

        try:
            WebUser = user.objects.get(pw=password , web_id=username)
        except user.DoesNotExist:
            WebUser = None

        if WebUser:
            request.session['web_id'] = username
            return render(request, 'bob/home.html', {'web_id': request.session.get('web_id')}) 
        else:
            messages.error(request, '회원 정보 불일치')
            return redirect("home")
    messages.error(request, 'post실패')
    return redirect("home")

# 로그아웃
def logout(request):
    # 세션 초기화
    request.session.flush()

    # 홈 페이지로 리디렉션
    return redirect('home')
# 회원가입 (1)법적 동의
def member_insert1(request):
    if 'web_id' in request.session:
        return render(request, 'bob/member_insert_1.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/member_insert_1.html')


# 회원 가입 (2)정보입력
def member_insert2(request):
    if 'web_id' in request.session:
        return render(request, 'bob/member_insert_2.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/member_insert_2.html')


# 회원가입 (3)축하
def member_insert3(request):
    if 'web_id' in request.session:
        return render(request, 'bob/member_insert_3.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/member_insert_3.html')

# 회원 가입 로직
def member_insert_logic(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        password_confirm = request.POST.get('password_confirm')

        # 비밀번호와 비밀번호 확인이 일치하는지 확인
        if password != password_confirm:
            messages.error(request, '비밀번호가 일치하지 않습니다.')
            return redirect('member_insert2')

        # 중복된 username이 데이터베이스에 존재하는지 확인
        if user.objects.filter(web_id=username).exists():
            messages.error(request, '이미 사용 중인 사용자 이름입니다.')
            return redirect('member_insert2')

        WebUser = user(web_id=username, pw=password)
        WebUser.save()

        return redirect('member_insert3')
    else:
        messages.error(request, '웹 오류.')
        return redirect('member_insert2')  

# 회원 정보 수정
def member_info_change(request):
    if 'web_id' in request.session:
        return render(request, 'bob/member_info_change.html', {'web_id': request.session.get('web_id')})
    else:
       return render(request, 'bob/member_info_change.html')

def info_change_logic(request):
    if request.method == 'POST':
        past_password = request.POST.get('past_password')
        new_password = request.POST.get('new_password')
        new_password_confirm = request.POST.get('new_password_confirm')

        try:
            WebUser = user.objects.get(pw=past_password)

        except user.DoesNotExist:
            messages.error(request, '기존 비밀번호가 일치하지 않습니다.')
            return redirect('member_info_change')

        if new_password == new_password_confirm:
            WebUser.pw = new_password
            WebUser.save()

            messages.success(request, "정보가 수정 되었습니다.")
            return redirect('member_info_change')
        else:
            messages.error(request, '변경할 비밀번호가 일치하지 않습니다.')
            return redirect('member_info_change')
    else:
        messages.error(request, '웹 에러')
        return redirect('member_info_change')

### 강의 

# 교육 과정
def lecture_table_0(request):
    return render(request, 'bob/lecture0.html')


# 강의 목차
def lecture_table_1(request):
    lectures = lecture1.objects.all()
    return render(request, 'bob/lecture1.html', {'lectures': lectures})

def lecture_table_2(request):
    lectures = lecture2.objects.all()
    return render(request, 'bob/lecture2.html' , {'lectures': lectures})




# 학습페이지


# 기초 /분석 
def lecture_study1(request):
    if request.method == 'GET':
        table = request.GET.get('table')
        page = request.GET.get('page')
        file=table+page
        return render(request, 'bob/lecture_study1.html', {'file': file})




# 기초 / 분석 교육 이미지 편집기
def lecture_editor1(request):
    if request.method == 'GET':
        table = request.GET.get('table')
        page = request.GET.get('page')
        file=table+page
        return render(request, 'bob/lecture_study_editor1.html', {'file': file})
    elif request.method == 'POST':
        image_width = request.POST.get('image_width')
        image_height = request.POST.get('image_height')
        image_margin_left = request.POST.get('image_margin_left')
        image_margin_top = request.POST.get('image_margin_top')
        fileName = request.POST.get('file')

        if image_width == "":
            image_width = 650
        if image_height == "":
            image_height = 500
        if image_margin_left == "":
            image_margin_left = 0
        if image_margin_top == "":
            image_margin_top = 0


        # print(image_width)
        # print(image_height)
        # print(image_margin_left)
        # print(image_margin_top)
        # print(fileName)
        
        css =  f"img {{\n"
        css += f"  width: {image_width}px;\n"
        css += f"  height: {image_height}px;\n"
        css += f"  margin-left: {image_margin_left}px;\n"
        css += f"  margin-top: {image_margin_top}px;\n"
        css += f"}}"
        # print(css)

        # 슬래시('/')로 변경하여 파일 경로 생성
        with open(f"web/static/web/lecture1/{fileName}.css", "wt") as f:
            f.write(css)
        return HttpResponseRedirect(request.get_full_path())





# 제작 강의
def lecture_study2(request):
    if request.method == 'GET':
        table = request.GET.get('table')
        page = request.GET.get('page')
        file=table+page
        return render(request, 'bob/lecture_study2.html', {'file': file})


#  제작 교육 이미지 편집기
def lecture_editor2(request):
    if request.method == 'GET':
        table = request.GET.get('table')
        page = request.GET.get('page')
        file=table+page
        return render(request, 'bob/lecture_study_editor2.html', {'file': file})
    elif request.method == 'POST':
        image_width = request.POST.get('image_width')
        image_height = request.POST.get('image_height')
        image_margin_left = request.POST.get('image_margin_left')
        image_margin_top = request.POST.get('image_margin_top')
        fileName = request.POST.get('file')

        if image_width == "":
            image_width = 650
        if image_height == "":
            image_height = 500
        if image_margin_left == "":
            image_margin_left = 0
        if image_margin_top == "":
            image_margin_top = 0


        # print(image_width)
        # print(image_height)
        # print(image_margin_left)
        # print(image_margin_top)
        # print(fileName)
        
        css =  f"img {{\n"
        css += f"  width: {image_width}px;\n"
        css += f"  height: {image_height}px;\n"
        css += f"  margin-left: {image_margin_left}px;\n"
        css += f"  margin-top: {image_margin_top}px;\n"
        css += f"}}"
        # print(css)

        # 슬래시('/')로 변경하여 파일 경로 생성
        with open(f"web/static/web/lecture2/{fileName}.css", "wt") as f:
            f.write(css)
        return HttpResponseRedirect(request.get_full_path())






# 문제풀이 목차
def exe(request):
    page = request.GET.get('page', 1)  # 페이지, 기본값을 1로 설정
    question_list = problem.objects.order_by('level')
    paginator = Paginator(question_list, 9)  # 페이지당 10개씩 보여주기
    page_obj = paginator.get_page(page)
    
    if 'web_id' in request.session:  
        return render(request, 'bob/exe.html', {'question_list': page_obj})
    else:
        return render(request, 'bob/exe.html', {'question_list': page_obj})



# 문제풀이 
def exe2(request):
    file = request.GET.get('table')  
    if file:
        exes = problem.objects.filter(problemTitle=file)
        return render(request, 'bob/exe2.html', {'file': file, 'exes': exes})





# 문제풀이 정답처리
def exe3(request):
    if request.method == 'POST':
        problem_name = request.POST.get('problem_name').strip()
        answer = request.POST.get('answer')

        # 외부 텍스트 파일의 경로
        file_path = 'web/static/web/problem/answer.txt'


        answers = {}  # 딕셔너리 초기화

        # 파일에서 데이터를 읽어와서 answers 딕셔너리를 초기화
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()  # 줄 끝의 공백 및 개행 문자를 제거합니다.
                if '=' in line:
                    key, value = line.split('=')
                    key = key.strip()
                    value = value.strip()
                    answers[key] = value

        # problem_name과 answer가 answers 딕셔너리에 존재하면 333을 출력
        if problem_name in answers and answer == answers[problem_name]:
            return render(request, 'bob/answer1.html')
        else:
            return render(request, 'bob/answer2.html')



# 시나리오 목차
def scenario1(request):
    page = request.GET.get('page', 1)  # 페이지, 기본값을 1로 설정
    question_list = scenario.objects.order_by('level')
    paginator = Paginator(question_list, 9)  # 페이지당 10개씩 보여주기
    page_obj = paginator.get_page(page)
    
    if 'web_id' in request.session:  
        return render(request, 'bob/scenario.html', {'question_list': page_obj})
    else:
        return render(request, 'bob/scenario.html', {'question_list': page_obj})






# 시나리오
def scenario2(request):
    file = request.GET.get('table')
    if request.method == 'GET':
        exes = scenario.objects.filter(problemTitle=file)
        return render(request, 'bob/scenario2.html', {'file': file, 'exes': exes})




# 시나리오 정답처리
def scenario3(request):
    if request.method == 'POST':
        problem_name = request.POST.get('problem_name').strip()
        answer = request.POST.get('answer')

        # 외부 텍스트 파일의 경로
        file_path = 'web/static/web/scenario/answer.txt'

        answers = {}  # 딕셔너리 초기화

        # 파일에서 데이터를 읽어와서 answers 딕셔너리를 초기화
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()  # 줄 끝의 공백 및 개행 문자를 제거합니다.
                if '=' in line:
                    key, value = line.split('=')
                    key = key.strip()
                    value = value.strip()
                    answers[key] = value

        # problem_name과 answer가 answers 딕셔너리에 존재하면 333을 출력
        if problem_name in answers and answer == answers[problem_name]:
            return render(request, 'bob/answer1.html')
        else:
            return render(request, 'bob/answer2.html')


# 게시판
def board(request):
    return render(request, 'bob/board.html')

def cookie_reset(request):
    request.session.flush()
    response = HttpResponse("Cookie Cleared")
    response.delete_cookie('cookie_name')
    return render(request, 'bob/board.html')