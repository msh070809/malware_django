
# db --------------------------------
from .models import user ,problem
# -----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseRedirect
from django.db.models import Sum
from django.http import HttpResponseNotFound #추가
from django.db import IntegrityError
from django.contrib import messages
from django.core.paginator import Paginator
from django.shortcuts import render, get_object_or_404


import datetime
import hashlib

'''
import hashlib
print(hashlib.sha256("Hello, World!".encode('utf-8')).hexdigest())

'''





def index(request):
    return render(request, 'login/login_form.html')





# 문제 풀이 페이지
def SolvePage(request, number):
    if 'web_id' in request.session:
        problem_record = get_object_or_404(problem, number=number) 
        if request.method == 'POST':
            if problem_record.answer == request.POST['answer']:
                return HttpResponse('<h1>정답입니다</h1>')
            else:
                return HttpResponse('<h1>오답입니다</h1>')
        else: 
            return render(request, 'login/solve_page.html', {'web_id': request.session.get('web_id'), 'problem_number': number, 'problem': problem_record})
    else:
        return HttpResponse('<h1>로그인해주세요.</h1>')





# 문제 목차 페이지
# 로그인 , 비로그인 둘 다 접근 가능해야 한다
from django.core.paginator import Paginator
from django.shortcuts import render
from .models import problem

def ProblemSolving(request):
    page = request.GET.get('page', 1)  # 페이지, 기본값을 1로 설정
    question_list = problem.objects.order_by('number')
    paginator = Paginator(question_list, 10)  # 페이지당 10개씩 보여주기
    page_obj = paginator.get_page(page)
    
    if 'web_id' in request.session:
        return render(request, 'login/problem.html', {'web_id': request.session.get('web_id'), 'question_list': page_obj})
    else:
        return render(request, 'login/problem.html', {'question_list': page_obj})





# 회원정보 수정 전 비밀번호 확인
# 비로그인 상태에서는 접속 불가
# 세션 전달
def member_modify(request):
    if 'web_id' in request.session:
        user_obj = user.objects.get(web_id=request.session.get('web_id'))
        if request.method == 'POST':
            if user_obj.pw == hashlib.sha256(request.POST['password'].encode('utf-8')).hexdigest():
        
                if request.POST['pw'] != request.POST['pw_conf']:
                    return HttpResponse("<h1>비밀번호 확인이 맞지 않습니다</h1>")
                else:
                    user_obj.pw = hashlib.sha256(request.POST['pw'].encode('utf-8')).hexdigest()
                    user_obj.email = request.POST['email']
                    user_obj.gender = request.POST['gender']
                    user_obj.birth = request.POST['birth']
                    user_obj.number1 = request.POST['num1']
                    user_obj.number2 = request.POST['num2']
                    
                    user_obj.save()
                return HttpResponseRedirect("main")    
            else:
                return HttpResponse('<h1>현재 비밀번호가 올바르지 않습니다.</h1>')
        
        
        else:
            return render(request, 'login/member_modify.html' , {'web_id': request.session.get('web_id') , 'user_obj': user_obj} )
    
    
    
    else:
        return HttpResponseRedirect("main")    










# 로그인
# 이미 로그인 상태에서는 해당 주소로 들어갈 수 없게 처리함
def main(request):
    if 'web_id' in request.session:
        return render(request, 'login/logout.html', {'web_id': request.session.get('web_id')})
    else:
        if request.method == 'POST':
            input_id = request.POST['username']
            input_pw = hashlib.sha256(request.POST['password'].encode('utf-8')).hexdigest()

            try:
                user_obj = user.objects.get(web_id=input_id, pw=input_pw)
                # 사용자 인증이 성공한 경우 세션을 설정
                request.session['web_id'] = user_obj.web_id
                return render(request, 'login/logout.html', {'web_id': request.session.get('web_id')})
            
            except user.DoesNotExist:
                # 사용자 인증이 실패한 경우 오류 메시지를 표시합니다.
                return HttpResponse('<h1>아이디 또는 비밀번호가 올바르지 않습니다.</h1>')
        else:
            return render(request, 'login/login_form.html')





# 로그아웃
def logout(request):
    try:
        request.session.clear()
        return HttpResponseRedirect("main")
    except:
        return HttpResponseRedirect("main")
    





#회원가입 폼
# 이미 로그인 상태에서는 해당 주소로 들어갈 수 없게 처리함
def member_form(request):
    if 'web_id' in request.session:
        return HttpResponseRedirect("main")
    else:
        return render(request, 'login/member_form.html')



# 회원가입
# 이미 로그인 상태에서는 해당 주소로 들어갈 수 없게 처리함
def sign(request):
    if 'web_id' in request.session:
        return HttpResponseRedirect("main")
    else:
        if request.method == 'POST':
            id= request.POST['id']
            email = request.POST.get('email')
            # Check if the email already exists
            if user.objects.filter(web_id=id).exists() or user.objects.filter(email=email).exists():
                return HttpResponse("<h1>존재하는 계정 또는 등록된 이메일 입니다.</h1>")
            else:
                # Save the new user
                if request.POST['pw'] == request.POST['pw_conf']:
                    new_user = user(
                    web_id=request.POST['id'],
                    pw=hashlib.sha256(request.POST['pw'].encode('utf-8')).hexdigest(),
                    email = request.POST.get('email'),
                    gender=request.POST['gender'],
                    birth=request.POST['birth'],
                    number1=request.POST['num1'],
                    number2=request.POST['num2'],
                    )
                    new_user.save()
                else:
                    return HttpResponse("<h1>비밀번호 확인이 옳바르지 않습니다.</h1>")
            return HttpResponseRedirect("main")
        
        return HttpResponseRedirect("main")


